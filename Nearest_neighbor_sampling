NearMiss sampling is a technique used to handle imbalanced datasets by selecting a subset of the majority class (in your case, non-fraud records) that are closest to the minority class (fraud records). This method helps in creating a more balanced dataset for training models. Here's how you can implement NearMiss sampling using Python with libraries like `imbalanced-learn` and `scikit-learn`.

### Step 1: Install Necessary Libraries

Ensure you have `imbalanced-learn` installed, as it provides the NearMiss algorithm:

```bash
pip install imbalanced-learn
```

### Step 2: Import Necessary Libraries

```python
import pandas as pd
from imblearn.over_sampling import NearMiss
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
```

### Step 3: Load and Prepare Your Dataset

Assuming your dataset is in a DataFrame `df`, with features in columns and a target variable indicating fraud (`1`) or non-fraud (`0`).

```python
# Load dataset
# df = pd.read_csv('your_data.csv')

# Assuming 'target' is your target variable
X = df.drop('target', axis=1)
y = df['target']
```

### Step 4: Apply NearMiss Sampling

Use the `NearMiss` class from `imbalanced-learn` to oversample the minority class by selecting nearest neighbors from the majority class.

```python
# Initialize NearMiss model
nm = NearMiss(version=1)  # Version 1 is the simplest form

# Apply NearMiss sampling
X_res, y_res = nm.fit_resample(X, y)
```

### Step 5: Split Data into Training and Validation Sets

```python
# Split data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X_res, y_res, test_size=0.2, random_state=42)
```

### Step 6: Scale Data

Scaling is important to ensure that all features are on the same scale.

```python
# Scale data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
```

### Step 7: Train a Model

Train a model using the balanced dataset.

```python
# Train a model
model = RandomForestClassifier()
model.fit(X_train_scaled, y_train)

# Predict on validation set
y_pred = model.predict(X_val_scaled)

# Evaluate model performance
accuracy = accuracy_score(y_val, y_pred)
print(f"Model Accuracy: {accuracy}")
print("Classification Report:\n", classification_report(y_val, y_pred))
```

This code demonstrates how to use NearMiss sampling to balance your dataset for fraud detection. You can adjust the version of NearMiss based on your specific needs:

- **Version 1**: Selects the k nearest neighbors for each minority class sample.
- **Version 2**: Selects the k nearest neighbors for each minority class sample, but also considers the distance from the majority class samples to the minority class samples.
- **Version 3**: Similar to version 2 but uses a different approach to calculate distances.

Each version might perform differently depending on your dataset.
