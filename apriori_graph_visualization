fraud_rules = rules[
    (rules['consequents'].apply(lambda x: len(x) == 1 and 'fraud' in x)) &  # Only "fraud" in consequents
    (rules['antecedents'].apply(lambda x: len(x) <= 2)) &  # Limit to 1 or 2 antecedents
    (rules['confidence'] > 0.8) &  # High confidence
    (rules['lift'] > 3)  # Strong association
].sort_values(by=["lift", "confidence"], ascending=[False, False])

print(fraud_rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])


fraud_rules = fraud_rules.sort_values(by=["lift", "confidence"], ascending=[False, False])

fraud_rules = fraud_rules.sort_values(by=["lift", "confidence"], ascending=[False, False]) \
                         .drop_duplicates(subset=["antecedents"], keep="first")



import networkx as nx
import matplotlib.pyplot as plt

# Create graph for visualization
G = nx.DiGraph()

for _, row in fraud_rules.iterrows():
    for antecedent in row['antecedents']:
        for consequent in row['consequents']:
            G.add_edge(antecedent, consequent, weight=row['lift'])

# Draw graph
plt.figure(figsize=(8, 6))
pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True, node_color='lightblue', edge_color='gray', node_size=3000, font_size=10)
plt.title("Fraud Association Rules")
plt.show()
