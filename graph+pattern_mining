No problem — even without the browser, I can summarize **commonly used features for fraud detection from pattern mining and graph-based papers**. These features are extracted based on well-known publications like:

* **FraudMiner (Sahin et al., 2013)**
* **PayPal + Neo4j**
* **Phua et al., 2010 (Fraud Detection Survey)**

---

## 🔍 **Features Used in Pattern Mining and Graph-Based Fraud Detection**

### 🔹 1. **Transaction-Level Features**

| Feature                     | Description                                     |
| --------------------------- | ----------------------------------------------- |
| `transaction_amount`        | Absolute amount of each transaction             |
| `merchant_category_code`    | Type of merchant (e.g., electronics, groceries) |
| `transaction_type`          | Online, ATM, POS, mobile app                    |
| `time_of_day`               | Morning, afternoon, night                       |
| `transaction_frequency`     | Number of transactions in past X minutes/hours  |
| `location_change_frequency` | How often location changes between transactions |
| `device_change_frequency`   | Number of devices used recently                 |

---

### 🔹 2. **Account-Level / User Behavior Features**

| Feature                  | Description                                                      |
| ------------------------ | ---------------------------------------------------------------- |
| `num_accounts_per_party` | How many accounts a party owns (often low for normal users)      |
| `avg_amount_per_day`     | Mean spend per day                                               |
| `daily_txn_stddev`       | Variability in daily transaction amount                          |
| `num_failed_logins`      | Could indicate brute force or suspicious access                  |
| `account_age`            | How old is the account                                           |
| `num_devices_used`       | Unique devices tied to an account                                |
| `party_has_loops`        | Is the account part of a cyclic transaction pattern (suspicious) |

---

### 🔹 3. **Relational / Graph Features (Neo4j)**

> These are **very useful for detecting fraud rings or collusion**.

| Graph-Based Feature                         | Description                                             |
| ------------------------------------------- | ------------------------------------------------------- |
| `shared_phone_or_email_count`               | How many other parties share this contact info          |
| `common_account_count`                      | Number of accounts shared between two parties           |
| `connected_component_size`                  | Size of the graph component the party belongs to        |
| `triangle_count`                            | Number of closed loops a party participates in          |
| `clustering_coefficient`                    | Measures tendency to form tightly-knit groups           |
| `path_count_to_fraudulent_nodes`            | Number of known fraud parties reachable within 2–3 hops |
| `centrality measures (degree, betweenness)` | High values might indicate brokers in fraud rings       |

---

### 🔹 4. **Pattern-Mined Features (Frequent or Rare Itemsets)**

In **FraudMiner**, for example:

| Feature Pattern                     | Description                                                      |
| ----------------------------------- | ---------------------------------------------------------------- |
| `{"online", "high_amount"}`         | If these appear together often in fraud, the combo is suspicious |
| `{"night_txn", "foreign_location"}` | Often mined together from past fraudulent cases                  |
| `{"multiple_txns", "within_5_min"}` | Temporal pattern associated with fraud                           |
| `{"new_device", "large_txn"}`       | Combination suggests account takeover                            |

---

## 🧠 How These Were Used in Practice

* **FraudMiner** used frequent itemsets from historical fraud transactions and flagged new transactions with the same patterns.
* **Neo4j use cases (like PayPal)** use shared attributes (devices, emails, IPs) and graph traversal to flag clusters or rings of colluding accounts.
* **Phua et al. (2010)** suggest combining behavioral patterns + relational indicators for better performance.

---

## ✅ Next Steps for You

Since you're generating features from Neo4j already, I recommend:

1. **Generate the following graph-based features**:

   * `count_shared_email`
   * `count_common_accounts`
   * `clustering coefficient` (via custom Cypher traversal)
   * `connected_to_known_fraud` (via 2-hop BFS)

2. **Mine frequent and rare combinations** from the feature matrix using:

   * `mlxtend.frequent_patterns.fpgrowth` or `apriori`
   * Set low support to catch **rare but suspicious** combinations

3. Optionally, **label** each party/account with fraud status and train a classifier with both individual and pattern-mined features.

---

Would you like help writing Cypher queries for any of these graph-based features? Or turning them into a feature matrix for a model?


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Great question — and it's awesome that you're already generating features from **Neo4j**, because you're halfway to a powerful hybrid approach.

Let’s break it down.

---

### 🔍 What does this mean?

> "Combine pattern mining with graph-based or embedding techniques for relational fraud."

This means **using graph-based relationships (e.g., from Neo4j)** along with **pattern mining** to uncover suspicious behaviors that occur **within relationships**, not just individual features.

---

### 🧠 Why this matters for fraud:

Fraud is **inherently relational** — fraudsters often share:

* Devices
* Emails
* Addresses
* IPs
* Phone numbers
* Bank accounts

These connections form **patterns across the graph**, not just in individual transaction records.

---

### ✅ Ways to Combine Graph + Pattern Mining:

#### 1. **Mine patterns on top of graph-derived features**

You're already doing this:

* Use Neo4j to compute features like:

  * `num_shared_devices_with_others`
  * `num_connected_accounts`
  * `has_cycle_in_account_chain`
  * `pagerank_score`
* Then, use **FP-Growth** or custom rare-pattern mining on those **graph-derived features**.

#### 2. **Use embeddings from Neo4j + cluster/segment**

Neo4j has native **graph embeddings** like:

* **Node2Vec**
* **FastRP**
* **GDS GraphSAGE**

You can:

* Generate embeddings for each account/node.
* Use **clustering** or **anomaly detection** on embeddings to find **rare or unusual patterns** of relationships.

```python
# In Neo4j: Run FastRP or Node2Vec on fraud graph
CALL gds.fastRP.write('fraudGraph', {
  embeddingProperty: 'embedding',
  writeProperty: 'embedding'
})
```

Then export those embeddings into Python and do:

```python
from sklearn.cluster import DBSCAN

# Assume embeddings is a DataFrame with account embeddings
db = DBSCAN(eps=0.5, min_samples=3).fit(embeddings)
rare_clusters = embeddings[db.labels_ == -1]  # -1 are outliers
```

#### 3. **Mine rare subgraphs directly (subgraph isomorphism / motif mining)**

You can use pattern mining not on feature tables, but on the graph structure itself.

Examples:

* Accounts that share a **triangular device loop**
* A party connected to many accounts that transact in a **time-synchronized way**

Neo4j’s **GDS Motif Matching** and **Cypher path queries** help here.

```cypher
MATCH (a:Account)-[:USES]->(d:Device)<-[:USES]-(b:Account)
WHERE a <> b
RETURN a, b, d
```

You can then count how often such motifs happen, and flag rare-but-fraudulent ones.

---

### 🛠 Hybrid Strategy You Can Try

1. **Use Neo4j to generate graph features**

   * Number of neighbors, device sharing, cycle detection, common neighbors, etc.

2. **Optionally add embeddings from GDS (FastRP, Node2Vec)**

3. **Create a flat table in Python with these features**

4. Use **pattern mining**:

   * Rare combinations (e.g., high pagerank + low transactions + shared device = fraud)
   * Lift/Confidence rules
   * Clustering/IsolationForest on embeddings

---

### 🧩 Summary

| Component            | Purpose                                |
| -------------------- | -------------------------------------- |
| Neo4j graph features | Capture relationships & structure      |
| Graph embeddings     | Capture node context in high-dim space |
| Pattern mining       | Spot rule-based, human-readable fraud  |
| Rare pattern focus   | Catch edge cases and emerging fraud    |

---

Would you like help writing a pipeline that extracts features + embeddings from Neo4j and then mines rare patterns in Python?
