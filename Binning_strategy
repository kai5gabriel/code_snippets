import pandas as pd
import numpy as np

def bin_columns_with_zero_flag(df, columns, bins, labels, zero_label='red flag', new_suffix='_binned'):
    """
    Bin specified columns in a DataFrame, treating zeros as a special case.

    Parameters:
    - df: pandas DataFrame
    - columns: list of column names to process
    - bins: list of bin edges (excluding 0, which is handled separately)
    - labels: list of labels corresponding to bins (excluding zero_label)
    - zero_label: label for zero values (default: 'red flag')
    - new_suffix: suffix for new binned columns

    Returns:
    - DataFrame with new binned columns
    """
    df = df.copy()
    for col in columns:
        # Create a mask for zeros
        zero_mask = df[col] == 0
        # Bin non-zero values, drop duplicate bin edges if any
        binned = pd.cut(df.loc[~zero_mask, col], bins=bins, labels=labels, duplicates='drop', include_lowest=True)
        # Create a new column with default NaN
        new_col = pd.Series(np.nan, index=df.index)
        # Assign binned values
        new_col.loc[~zero_mask] = binned
        # Assign the zero label
        new_col.loc[zero_mask] = zero_label
        # Assign to DataFrame
        df[col + new_suffix] = new_col
    return df



bins = [0, 5, 15, float('inf')]
labels = ['low', 'medium', 'high']
result = bin_columns_with_zero_flag(df, ['connections', 'messages'], bins, labels)
