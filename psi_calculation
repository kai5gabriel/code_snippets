import pandas as pd
import numpy as np

def calculate_psi(expected, actual, bins=5):
    # Create bins based on the expected distribution
    min_val = min(min(expected), min(actual))
    max_val = max(max(expected), max(actual))
    bin_edges = np.linspace(min_val, max_val, bins + 1)
    
    # Bin the values for expected and actual populations
    expected_binned = pd.cut(expected, bins=bin_edges, right=False, include_lowest=True)
    actual_binned = pd.cut(actual, bins=bin_edges, right=False, include_lowest=True)
    
    # Count the occurrences in each bin
    expected_counts = pd.value_counts(expected_binned, normalize=True).sort_index()
    actual_counts = pd.value_counts(actual_binned, normalize=True).sort_index()
    
    # Replace zeros to avoid division errors
    expected_counts = expected_counts.replace(0, 0.0001)
    actual_counts = actual_counts.replace(0, 0.0001)
    
    # Calculate PSI for each bin
    psi_values = (expected_counts - actual_counts) * np.log(expected_counts / actual_counts)
    
    # Sum the PSI values
    psi = psi_values.sum()
    
    # Print intermediate results for better understanding (optional)
    print(f"Bin Edges: {bin_edges}")
    print(f"Expected Distribution:\n{expected_counts}")
    print(f"Actual Distribution:\n{actual_counts}")
    print(f"PSI Values for each bin:\n{psi_values}")
    
    return psi

# Example data
baseline = [60, 70, 80, 90, 100, 110, 120, 130, 140, 150]
comparison = [65, 72, 78, 95, 102, 115, 125, 138, 142, 155]

# Calculate PSI
psi_value = calculate_psi(baseline, comparison)
print(f"Population Stability Index (PSI): {psi_value}")
